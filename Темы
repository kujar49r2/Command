Генераторы списков, словарей
декораторы функций, yield
Функции ( *args, **kwargs)
asincIO асинхронное, мультипроцессорное, мультипоточное программирование
ООП self, наследование, магические методы классов, метаклассы, класс, инстанс
Хранение данных: редис, монгоДБ, постгрес, ORM

Исключения:
	можно самому определить класс исключения и наследовать его от exception
	raise Exception - намеренно вызвать исключение. Помещается в конструкцию if
	import traceback, потом вызвать traceback.format_exc - посмотреть где была ошибка
Импорт модулей
	в отдельные модули (файлы) записываем классы и функции и из другого файла их вызываем. но для начала нужно импортировать 
	import ... (from ... import ...) либо from ... import * - импортируем все. import назв_папки.назв_модуля - импорт модуля если он в папке.

if __name__ == '__main__' - Когда запускаем сам модуль, то у него имя __main__. А если этот модуль вызвать с другого модуля, то его имя будет как в названии файла. Эта конструкция нужна чтобы импортировать классы или функции с других модулей, но не выполнять код, который после них написан. Таким образом код после функций и классов выполняется только в том случае если запускать непосредственно сам этот файл (модуль)

Пакет - это папка в которой есть __init__.py В этот файл (__init__.py) записываем from .назв_модуля import ... - и в этом случае мы можем импортировать по названию папки (пакета)

Датаклассы:
	from dataclasses import dataclass
	
	В этом случае вместо записи:
	class Food:
		def __init__(self, name, food_type):
			self.name = name
			self.food_type = food_type
	
	Можно писать так:		
	@dataclass
	class Food:
		name: str
		food_type: str
		
		
		

		

