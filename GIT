Области GIT: 
	Рабочая дирректория - все файлы в локальном проекте
	Индекс (staging area) - подготовленные файлы для сохранения (комита)
	Репозиторий - все что внутри папки .git (все версии комитов)
Статусы отслеживания файлов:
	untracked (неотслеживаемый) - все новые файлы (U)
	staged (подготовленный) - файлы, добавленные в индекс
	modified (модифицированный) (M)
	unmodified (немодифицированный) - файл находится во всех областях, но не изменялся

Команды :
	git config --global user.name "vladimir kuzmichev" - установить имя
	git config --global user.email kujar49r2@yandex.ru - установить маил
	git config --list - посмотреть все настройки
	git config --global init.defaultBranch <name>
	
	git init - инициализировать гит в папке, из которой вызвали. Создает файл .git
	git status - посмотреть подготовленные файлы для комита (текущее состояние репозитория)
	git add <files> или git add . - подготовить файлы перед коммитом (перевод из рабочей дирректории в индекс)
	git commit -m "message" - добавить в репозиторий с комментарием
	git commit --amend -m "Новое сообщение посл коммита" - дополняет последний коммит, добавляя в него свежие изменения. Меняет сообщение посл коммита. Новый коммит не создается.
	git log - посмотреть историю изменений (коммитов)
	git diff --staged - показывает разницу между текущим отслеживаемым состоянием репозитория и последним коммитом (можно git diff COMMIT_ID)
	git diff - разница между текущим неотслеживаемым состоянием и последним коммитом
	
	git reset --hard <HEAD or commit_id> - возвращает проект к указанному коммиту, при этом удаляет все коммиты после указанного безвозвратно
	git reset --mixed <HEAD or commit_id> - возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую зону
	git reset --soft <HEAD or commit_id> - возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую зону
	если просто вызвать git reset, то произойдет возврат к коммиту, на который указывает HEAD с параметром --mixed (по умолчанию всегда --mixed)
	git reset не удаляет неотслеживаемые файлы
	git clean -n - показывает какие файлы будут удалены из неотслеживаемых
	git clean -f - удаляет неотслеживаемые файлы
	
	git branch - отображает список всех веток (посмотреть на какой ветке находимся)
	git branch <name> - создание новой ветки (название должно отражать суть функционала, который разрабатывается)
	git branch -m <name> - установить имя текущей ветки (сначала нужно в нее перейти)
	git branch -d <name> - удаление ветки (текущую ветку удалить нельзя)
	git branch -a - отображает все ветки, включая те, которые находятся в удаленных репозиториях
	git branch -r - отображает ветки, которые находятся в удаленных репозиториях
	
	git checkout <commit hash> (<branch name>) - переход в определенную версию проекта по SHA хэшу (перемещает указатель head)
	git checkout -b <branch name> - создание новой ветки и переход в нее
	git checkout <указатель коммита> -- file_name1 file_name2... - возвращает указанные файлы к версии, которая была у них в указанном коммите
	
	
	git merge -m "message" <feature branch name> - слияние ветки "feature branch name" в текущую ветку
	Объединение веток (merge commit) - производит слияние веток путем создания нового коммита, где будут видны изменения всех веток (2:41:40 в видосе)
	Ветка - ссылка на последний комит. Ести мы переходим на прошлый коммит (указатель head указывает на нее) это состояние называется detached. Не рекомендуется находиться в этом состоянии долгое время (используется по большей части чтобы просто посмотреть что было в прошлой версии)
	
	git remote -v - посмотреть список существующих удаленных репозиториев (или просто git remote)
	git remote add origin <url> - подключить удаленный репозиторий с именем origin (можно любое имя) с адресом url
	git remote remove <name_repository> - удалить репозиторий с указанным названием
	git push -u origin <branch> - загрузка изменений из локальной ветки в удаленную с созданием связи между ними (можно без -u)
	git push - загрузить изменения из локальной ветки в ветку удаленного репозитория
	git pull origin master - скачать и применить изменения с удаленной ветки в локальную
	git pull = 1. git fetch - скачивает удаленные ветки с репозитория, но не делает слияния удаленной ветки с локальной. 2. git merge origin/master - слияние
	перед загрузкой на удаленный репозиторий нужно чтобы совпадали локальный и удаленный
	
	git clone <url> - клонирование удаленного репозитория в локальный

